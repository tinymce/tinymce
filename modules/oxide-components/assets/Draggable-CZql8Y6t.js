import{r as n,j as y}from"./iframe-6DqPFkYb.js";const M=(t,e)=>({deltaX:e.x-t.x,deltaY:e.y-t.y}),f=(t,e,o)=>Math.min(o,Math.max(e,t)),P=(t,e,o,r)=>{const s=t.x+t.width,a=t.y+t.height;return{x:{min:Math.ceil(o.x+(e.x-t.x)),max:Math.floor(r.x-(s-e.x))},y:{min:Math.ceil(o.y+(e.y-t.y)),max:Math.floor(r.y-(a-e.y))}}},R=n.createContext(null),D=()=>{const t=n.useContext(R);if(t===null)throw new Error("Draggable compound components must be rendered within the Draggable component");return t},m=n.forwardRef(({children:t,style:e,...o},r)=>{const[s,a]=n.useState({x:0,y:0}),l=n.useRef(null),u=`translate3d(${s.x}px, ${s.y}px, 0px)`,x=n.useMemo(()=>({setShift:a,draggableRef:l}),[]),p=n.useCallback(d=>{typeof r=="function"?r(d):r&&(r.current=d),l.current=d},[r]);return y.jsx(R.Provider,{value:x,children:y.jsx("div",{ref:p,style:{...e,transform:u},...o,children:t})})}),h=({children:t})=>{const[e,o]=n.useState(!1),r=n.useRef(null),s=n.useRef({x:0,y:0}),a=n.useRef({x:{min:0,max:0},y:{min:0,max:0}}),{setShift:l,draggableRef:u}=D(),x=n.useCallback(c=>{if(u.current===null)return;o(!0),r.current=c.target,r.current.setPointerCapture(c.pointerId);const i={x:Math.round(c.clientX),y:Math.round(c.clientY)};s.current=i;const g=u.current.getBoundingClientRect();a.current=P(g,i,{x:0,y:0},{x:window.innerWidth,y:window.innerHeight})},[u]),p=n.useCallback(c=>{if(e){const i={x:f(Math.round(c.clientX),a.current.x.min,a.current.x.max),y:f(Math.round(c.clientY),a.current.y.min,a.current.y.max)},{deltaX:g,deltaY:_}=M(s.current,i);s.current=i,l(({x:w,y:C})=>({x:w+g,y:C+_}))}},[e,l]),d=n.useCallback(c=>{var i;(i=r.current)==null||i.releasePointerCapture(c.pointerId),o(!1)},[]),b=n.useCallback(()=>{o(!1)},[]);return y.jsx("div",{onPointerDown:x,onPointerUp:d,onPointerMove:p,onLostPointerCapture:b,style:{cursor:e?"grabbing":"grab",userSelect:"none"},children:t})};try{m.displayName="Root",m.__docgenInfo={description:"",displayName:"Root",props:{popover:{defaultValue:null,description:"",name:"popover",required:!1,type:{name:'"hint" | "manual" | "auto"'}}}}}catch{}try{h.displayName="Handle",h.__docgenInfo={description:"",displayName:"Handle",props:{}}}catch{}export{h as H,m as R};
