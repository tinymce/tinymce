{
  "author": {
    "name": "Arian Stolwijk",
    "url": "http://github.com/arian"
  },
  "name": "coverjs",
  "description": "JSCoverage compatible JavaScript code coverage tool",
  "version": "0.0.14",
  "repository": {
    "url": "git://github.com/arian/CoverJS.git"
  },
  "main": "cover.js",
  "bin": {
    "coverjs": "./bin/cover.js",
    "coverjs-report": "./bin/reporter.js"
  },
  "dependencies": {
    "esprima": "0.9",
    "escodegen": "0.x",
    "prime": "0.0.5-alpha",
    "Supersonic": "0.x",
    "mkdirp": "0.3.3",
    "colors": "0.6"
  },
  "devDependencies": {
    "mocha": "1.3",
    "expect.js": "0.1"
  },
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "CoverJS (alpha)\n===============\n\nMake sure all your code is tested, don't miss anything.\nCoverJS intruments your code. Using the instrumented code with your tests\nwill result in a nice object, which can be passed through one of the reporters\nto create a nice graphical output of your code.\n\nInstead of instrumenting lines (like JSCoverage), CoverJS will instrument\nstatements, which should result in a more precise result.\n\n### Dependencies\n\n- [Esprima](https://github.com/ariya/esprima) a wonderful JavaScript parser\n- [Escodegen](https://github.com/Constellation/escodegen)\n- [Prime](https://github.com/mootools/prime) awesome little OOP library\n\n### Reporters\n\n - HTML\n - Text\n\n### CLI Usage\n\nTo instrument the code, CoverJS comes with a CLI tool:\n\n\tcoverjs --output cov/ file.js test/*\n\n### Reporting\n\nThe instrumented code should be executed to count the number of calls for each\nstatement.\n\nUsually your tests will try to cover each statement.\n\nAn example code that will capture the output and generate a HTML report would\nlook like:\n\n```js\n\nvar HTMLReporter = require('../lib/reporters/HTMLReporter');\n\nrequire('../test-cov/test/fixture.js');\n\nvar reporter = new HTMLReporter(global.__$coverObject);\nconsole.log(reporter.report());\n```\n\nThe output stream can be redirected to a file using\n\n\tnode test.js > report.html\n\nso the result can be viewed in a browser\n\n#### node\n\nThere are different templates with which what the instrumented code should\nstart and end. For node there exists an template that saves the output as a\nJSON file, which can later be used as to generate a HTML report.\n\n\tcoverjs --template node --report ./cov.json file.js\n\nWith the `coverjs-report` tool, which reads from `stdin`, an HTML output can be\ngenerated:\n\n\tcat ./cov.json | coverjs-report -r html > cov.html\n\nSee the [prime Makefile](https://github.com/mootools/prime/blob/879918f05/Makefile#L40-49)\nfor an example.\n\n#### Screenshot\n\n![Screenshot](http://i.imgur.com/lxGpb.png)\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/arian/CoverJS/issues"
  },
  "homepage": "https://github.com/arian/CoverJS",
  "_id": "coverjs@0.0.14",
  "_from": "coverjs@>= 0.0.14"
}
