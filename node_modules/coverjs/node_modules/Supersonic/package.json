{
  "author": {
    "name": "Arian Stolwijk",
    "email": "stolwijk.arian@gmail.com"
  },
  "name": "Supersonic",
  "description": "A small and supersonic flow-controll library",
  "version": "0.0.6",
  "repository": {
    "type": "git",
    "url": "git://github.com/arian/Supersonic.git"
  },
  "main": "index",
  "scripts": {
    "test": "node test/test"
  },
  "dependencies": {},
  "devDependencies": {},
  "optionalDependencies": {},
  "engines": {
    "node": "*"
  },
  "readme": "Supersonic\n----------\n\nA small and supersonic flow-controll library for Node.js\n\n[![Build Status](https://secure.travis-ci.org/arian/LISP.js.png)](http://travis-ci.org/arian/Supersonic)\n\n### Install\n\n\tnpm install Supersonic\n\n### Usage\n\nThere are two modes, async and sync (or queued).\n\nAsync, all functions simultaneously.\n\n``` js\nvar FlowAsync = require('Supersonic').Async;\n\nnew FlowAsync().push(function(ready){\n\tsetTimeout(function(){\n\t\tready();\n\t}, 1000);\n})).push(function(ready){\n\tsetTimeout(function(){\n\t\tready();\n\t}, 2000);\n}).invoke(function(){\n\tconsole.log('all ready, after 2 seconds');\n});\n```\n\nAll functions after each other.\nAdditionally the Queue can pass data through the `next([arg1, arg2, â€¦])` calls.\n\n``` js\nvar FlowQueue = require('Supersonic').Queue;\n\nnew FlowQueue().push(function(next){\n\tsetTimeout(function(){\n\t\tnext(3.14, 2.7218);\n\t}, 1000);\n})).push(function(next, finish, pi, e){\n\tsetTimeout(function(){\n\t\tfinish(new Error);\n\t}, 2000);\n}).push(function(){\n\t// not called because of the finish() in the previous call.\n}).invoke(function(err){\n    console.log('all ready, after 3 seconds');\n});\n```\n\nThat's it!\n\n### Passing more data\n\nWith `FlowQueue` it is possible to pass arguments. However when a lot of\narguments have to be passed, this can be a bit tedious. Fortunately this can be\neasily avoided by putting the data on an object.\n\n``` js\nvar data = {};\nnew FlowAsync().push(function(ready){\n\tsetupDatabase(function(db){\n\t\tdata.db = db;\n\t\tready();\n\t});\n}).push(function(ready){\n\tsetupCache(function(cache){\n\t\tdata.cache = cache;\n\t\tready();\n\t});\n}).invoke(function(){\n\tconsole.log(data);\n});\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/arian/Supersonic/issues"
  },
  "homepage": "https://github.com/arian/Supersonic",
  "_id": "Supersonic@0.0.6",
  "_from": "Supersonic@0.x"
}
